[{"/Users/richardlu/Documents/GitHub projects/chess-card/src/index.tsx":"1","/Users/richardlu/Documents/GitHub projects/chess-card/src/reportWebVitals.ts":"2","/Users/richardlu/Documents/GitHub projects/chess-card/src/App.tsx":"3","/Users/richardlu/Documents/GitHub projects/chess-card/src/sketch.tsx":"4","/Users/richardlu/Documents/GitHub projects/chess-card/src/components/TextInput/TextInput.tsx":"5","/Users/richardlu/Documents/GitHub projects/chess-card/src/components/Footer/Footer.tsx":"6","/Users/richardlu/Documents/GitHub projects/chess-card/src/components/Description.tsx":"7","/Users/richardlu/Documents/GitHub projects/chess-card/src/components/Canvas/canvas.tsx":"8","/Users/richardlu/Documents/GitHub projects/chess-card/src/components/CardCustomization.tsx":"9","/Users/richardlu/Documents/GitHub projects/chess-card/src/components/RadioButtonGroup/RadioButtonGroup.tsx":"10","/Users/richardlu/Documents/GitHub projects/chess-card/src/components/RadioButtonGroup/RadioButton.tsx":"11","/Users/richardlu/Documents/GitHub projects/chess-card/src/components/TextInput/Button.tsx":"12","/Users/richardlu/Documents/GitHub projects/chess-card/src/components/types.ts":"13"},{"size":500,"mtime":1607062231617,"results":"14","hashOfConfig":"15"},{"size":425,"mtime":1607062231618,"results":"16","hashOfConfig":"15"},{"size":748,"mtime":1608883871160,"results":"17","hashOfConfig":"15"},{"size":1612,"mtime":1608003440215,"results":"18","hashOfConfig":"15"},{"size":879,"mtime":1608102212173,"results":"19","hashOfConfig":"15"},{"size":913,"mtime":1608268344877,"results":"20","hashOfConfig":"15"},{"size":394,"mtime":1608268741422,"results":"21","hashOfConfig":"15"},{"size":5134,"mtime":1609396562445,"results":"22","hashOfConfig":"15"},{"size":5501,"mtime":1609396606004,"results":"23","hashOfConfig":"15"},{"size":1352,"mtime":1609373579221,"results":"24","hashOfConfig":"15"},{"size":1249,"mtime":1609373566720,"results":"25","hashOfConfig":"15"},{"size":2120,"mtime":1609373790147,"results":"26","hashOfConfig":"15"},{"size":246,"mtime":1609396534527,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"jgziwi",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"30"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"30"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"30"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"57"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/richardlu/Documents/GitHub projects/chess-card/src/index.tsx",[],["62","63"],"/Users/richardlu/Documents/GitHub projects/chess-card/src/reportWebVitals.ts",[],"/Users/richardlu/Documents/GitHub projects/chess-card/src/App.tsx",[],"/Users/richardlu/Documents/GitHub projects/chess-card/src/sketch.tsx",["64"],"import React from \"react\"\nimport Sketch from \"react-p5\"\nimport p5Types from 'p5'\n\ntype ChessCardProps = {\n    // parentRef: React.Ref<HTMLDivElement>,\n\n    username: string,\n    ratings: {}[],\n\n    colorScheme: 'w'|'b'|'bw'|'wb'|undefined,\n    icon: string | undefined,\n}\n\nconst ChessCard: React.FC<ChessCardProps> = ({username, ratings, colorScheme, icon}: ChessCardProps) => {\n    const user = '@' + username\n    \n    let overpassRegular: p5Types.Font, \n        overpassBlack: p5Types.Font,\n        lichess: p5Types.Font\n\n    const preload = (p5: p5Types) => {\n        overpassRegular = p5.loadFont(`${process.env.PUBLIC_URL}/fonts/Overpass-Regular.ttf`)\n        overpassBlack = p5.loadFont(`${process.env.PUBLIC_URL}/fonts/Overpass-Black.ttf`)\n        lichess = p5.loadFont(\"http://db.onlinewebfonts.com/t/1926835283cbd17d05331a50e3039ada.ttf\")\n    }\n\n    const setup = (p5: p5Types, canvasParentRef: Element) => {\n        console.log(username)\n        p5.createCanvas(320, 320).parent(canvasParentRef)\n        p5.colorMode(p5.HSL)\n        p5.noStroke()\n\n        p5.fill('green')\n        p5.background(p5.color(0, 100, 0, 0))\n        p5.rect(0, 0, 320, 320, 10, 10, 10, 10)\n        p5.fill('black')\n        p5.rect(0, p5.height * (2/3), p5.width, p5.height / 3)\n\n        p5.textFont(overpassRegular)\n        p5.textSize(32)\n        p5.fill(0, 102, 153)\n        p5.text(user, 20, 250)\n\n        // Format text\n        p5.textFont(lichess)\n        p5.text('T', 50, 50)\n    }\n\n    const draw = (p5: p5Types) => {\n    }\n\n    return <Sketch preload={preload} setup={setup} draw={draw} />\n}\n\nexport default ChessCard",["65","66"],"/Users/richardlu/Documents/GitHub projects/chess-card/src/components/TextInput/TextInput.tsx",[],"/Users/richardlu/Documents/GitHub projects/chess-card/src/components/Footer/Footer.tsx",[],"/Users/richardlu/Documents/GitHub projects/chess-card/src/components/Description.tsx",["67"],"import React from 'react'\n\nfunction Description() {\n    return (\n        <div>\n          <p><a className=\"hover:underline hover:text-color-blue\" href=\"#\">How does it work?</a></p>\n          <p className=\"hidden\">I ask the <a href=\"https://lichess.org/api\">Lichess API</a> to send me data about your ratings. It's all publicly accessible. </p>\n        </div>\n    )\n}\n\nexport default Description\n","/Users/richardlu/Documents/GitHub projects/chess-card/src/components/Canvas/canvas.tsx",["68","69","70"],"import Konva from 'konva'\nimport React from 'react'\nimport { Stage, Layer, Rect, Text, Group, Image } from 'react-konva'\nimport useImage from 'use-image'\nimport { LichessRating, CardColorState, CardIconState } from '../types'\nimport bishopIcon from '../../assets/icons/icons8-knight-100-2.png'\n\nexport type CardProps = {\n    username: string,\n    ratings: LichessRating[],\n    color: CardColorState,\n    icon?: CardIconState | undefined,\n}\n\ntype IconProps = {\n    x: number,\n    y: number,\n    icon: string,\n}\nconst PieceIcon = ({ x, y, icon }: IconProps) => {\n    const [image] = useImage(icon)\n    if (image === undefined) console.log(\"Image was undefined. God damn it.\")\n    return <Image image={image} x={x} y={y} offsetX={50} offsetY={50} />\n}\n\n/**\n * Returns the coresponding icon for a given time control/game type.\n * The returned icon should be rendered in the Lichess font.\n * @param name the name of the time control\n */\nconst getIcon = (name: string) => {\n    const check = name.toLowerCase()\n    switch (check) {\n        case 'bullet':\n            return 'T'\n        case 'blitz':\n            return ')'\n        case 'rapid':\n            return '#'\n    }\n}\n\ntype RatingTextProps = {\n    ratings: LichessRating[]\n    x: number,\n    y: number,\n    fill: string,\n}\n/**\n * @param ratings\n */\nconst RatingText = ({ ratings, x, y, fill }: RatingTextProps ) => {\n    const ratingTextRef = React.useRef<Konva.Group>(null!)\n    const textProps = {\n        fontFamily: 'Overpass',\n        fontSize: 16,\n        fill,\n        y: y\n    }\n    return(\n        <Group\n            ref={ratingTextRef}\n            offsetX={ratingTextRef.current ? ratingTextRef.current.getClientRect().width / 2 : 0}\n        >\n            {\n                ratings.map((rating, i) => {\n                    const newX = x + (i * 80)   // positioning of ratings\n                    console.log('i: ' + i, 'x: ' + newX, 'y: ' + y )\n                    return (\n                        <Group key={rating.name} x={newX}>\n                            <Text {...textProps} fontFamily=\"lichess\" text={getIcon(rating.name)}/>\n                            <Text {...textProps} x={18} text={rating.points[0][3].toString()}/>\n                        </Group>\n                    )\n                })\n            }\n        </Group>\n    )\n}\n\nconst mainColor = (v: CardColorState) => {\n    if (!v) return '#212121'\n    if (v instanceof Array) {\n        return `linear-gradient(0deg, ${v[0]} 50%, ${v[1]} 50%)`\n    } else {\n        return v\n    }\n}\n\n// function from https://stackoverflow.com/a/15832662/512042\nfunction downloadURI(uri: string, name: string) {\n    var link = document.createElement('a');\n    link.download = name;\n    link.href = uri;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n}\n\nexport default function Canvas({ username=\"Your username\", ratings, color, icon='' }: CardProps) {\n    const stageRef = React.useRef<Konva.Stage>(null!)\n    const CARD_WIDTH = 320\n    const background = color instanceof Array ? color[0] : color\n    const foreground = color instanceof Array ? color[1] : color\n\n    /**\n     * handle downloading of image\n     */\n    const handleExport = () => {\n        const uri = stageRef.current.toDataURL();\n        console.log(uri);\n        downloadURI(uri, 'stage.png');\n    };\n\n    const usernameRef = React.useRef<Konva.Text>(null!)\n\n    return (\n        <Stage\n            ref={stageRef}\n            width={CARD_WIDTH}\n            height={CARD_WIDTH}\n        >\n            <Layer>\n                <Rect\n                    x={0}\n                    y={0}\n                    width={CARD_WIDTH}\n                    height={CARD_WIDTH}\n                    fill={background}\n                    cornerRadius={10}\n                />\n                <PieceIcon\n                    x={CARD_WIDTH / 2}\n                    y={CARD_WIDTH / 3}\n                    icon={icon}\n                />\n            </Layer>\n            <Layer>\n                <Rect \n                    x={0}\n                    y={CARD_WIDTH * 2 / 3}\n                    width={CARD_WIDTH}\n                    height={CARD_WIDTH / 3}\n                    fill={foreground}\n                    cornerRadius={[0, 0, 10, 10]}\n                />\n                <Group>\n                    <Text\n                        ref={usernameRef}\n                        fontFamily=\"Overpass\"\n                        fontWeight={900}\n                        text={username && '@' + username}\n                        x={CARD_WIDTH / 2}\n                        y={230}\n                        fill={foreground === \"#EFEFEF\" ? \"#212121\" : \"#EFEFEF\"}\n                        align=\"center\"\n                        offsetX={usernameRef.current ? usernameRef.current.getTextWidth() / 2 : 0}  // sets origin point to center of element to allow for horizontal centering\n                        fontSize={28}\n                    />\n                    <RatingText ratings={ratings} x={CARD_WIDTH / 2} y={280} fill={foreground === \"#EFEFEF\" ? \"#212121\" : \"#EFEFEF\"} />\n                </Group>\n            </Layer>\n        </Stage>\n    )\n}\n","/Users/richardlu/Documents/GitHub projects/chess-card/src/components/CardCustomization.tsx",["71"],"import React from 'react'\nimport { LichessRating, CardColorState, CardIconState }  from './types'\nimport Canvas from './Canvas/canvas'\nimport Button from './TextInput/Button'\nimport ColorIcon from './RadioButtonGroup/ColorIcon/ColorIcon'\nimport TextInput from './TextInput/TextInput'\nimport RadioButtonGroup from './RadioButtonGroup/RadioButtonGroup'\nimport { RadioValue, HTMLInputValue } from './RadioButtonGroup/RadioButton'\nimport knightIcon from '../assets/icons/icons8-knight-100-2.png'\nimport clockIcon from '../assets/icons/icons8-chess-clock-100.png'\n\nexport default function CardCustomization() {\n    const [user, setUser] = React.useState<string>('')\n    const [ratings, setRatings] = React.useState<LichessRating[]>([])\n    const [cardColor, setCardColor] = React.useState<CardColorState>('#212121')\n    const [cardIcon, setCardIcon] = React.useState<CardIconState>('')\n\n    const [usersearchErrorMessage, setUsersearchErrorMessage] = React.useState<string>('')\n    const [usersearchErrorMessageIsActive, setUsersearchErrorMessageIsActive] = React.useState<boolean>(false)\n\n    const cardColorOptions: RadioValue<CardColorState>[] = [\n      {\n        key: 'white',\n        value: '#EFEFEF'\n      },\n      {\n        key: 'black',\n        value: '#212121'\n      },\n      {\n        key: 'black-white',\n        value: ['#212121', '#EFEFEF']\n      },\n      {\n        key: 'white-black',\n        value: ['#EFEFEF', '#212121']\n      }\n    ]\n    const cardIconOptions = [\n      {\n        key: 'knight',\n        value: knightIcon\n      },\n      {\n        key: 'bishop',\n        value: ''\n      },\n      {\n        key: 'clock',\n        value: clockIcon\n      }\n    ]\n    // const colorIcon = {\n    //   className: classNames(\n    //     'border-2 border-gray-100 hover:border-brand-red hover:shadow-lg cursor-pointer',\n    //     isActive && 'border-brand-red',\n    //     className ? className : '',\n    //   ),\n    //   style: {\n    //       display: 'inline-block',\n    //       width: '50px',\n    //       height: '50px',\n    //       borderRadius: '50%',\n    //       background: mainColor(value)\n    //   }\n    // }\n\n    /**\n     * @param username username of user\n     */\n    const getRatingData = async (username: string) => {\n        // Make the API request\n        const url = `https://lichess.org/api/user/${username}/rating-history`\n        const response = await fetch(url)\n\n        if (response.status === 200) {\n          if (usersearchErrorMessageIsActive) setUsersearchErrorMessageIsActive(false)\n\n          const ratings = await response.json() as Array<LichessRating>\n          // We only want to get bullet, blitz, and rapid ratings (for now)\n          const rapidRatings = ratings.slice(0, 3).map((r: LichessRating) => {\n              return({\n              ...r,\n              points: r.points.slice(r.points.length - 1) // get the most recent rating\n              }) \n          })\n          console.log(rapidRatings)\n          setRatings(rapidRatings)\n        } else {\n          if (response.status === 404) {\n            setUsersearchErrorMessage(`We couldn't find a user with that name. Please check your spelling and try again.`)\n            setUsersearchErrorMessageIsActive(true)\n          } else if (response.status >= 500) {\n            setUsersearchErrorMessage(`There was a problem connecting to Lichess's servers. Please wait and try again.`)\n            setUsersearchErrorMessageIsActive(true)\n          }\n          console.log(`Error: user not found: ${username}`)\n        }    \n    }\n\n    return (\n        <div className=\"grid grid-cols-2\">\n          <form action=\"\">\n            <fieldset className=\"space-y-6\">\n              <fieldset className=\"\">\n                <TextInput\n                  name=\"username\" \n                  id=\"username\" \n                  placeholder=\"Username\" \n                  label=\"Enter your lichess.org username\" \n                  value={user} \n                  onChange={ e => setUser(e.target.value) } \n                />\n                <Button className=\"ml-4\" onClick={() => getRatingData(user)}>Submit</Button>\n              </fieldset>\n              {usersearchErrorMessageIsActive && <p>{usersearchErrorMessage}</p>}\n              <RadioButtonGroup<CardColorState>\n                name=\"cardColor\"\n                label=\"Select a color for your card.\"\n                values={cardColorOptions}\n                onChange={(v: HTMLInputValue) => {\n                  console.log(\"Radio button clicked\")\n                  console.log(v)\n                  console.log(cardColorOptions.find(c => c.key === v))\n                  setCardColor(cardColorOptions.find(c => c.key === v)!.value)\n                }}\n              />     \n              <RadioButtonGroup<CardIconState>\n                name=\"cardIcon\"\n                label=\"Select an icon for your card.\"\n                values={cardIconOptions}\n                onChange={(v: HTMLInputValue) => setCardIcon(cardIconOptions.find(i => i.key === v)!.value)}\n              />      \n            </fieldset>\n          </form>\n          <div className=\"flex flex-col align-center\">\n            <Canvas \n              username={user}\n              ratings={ratings}\n              color={cardColor}\n              icon={cardIcon}\n            />\n            <div className=\"flex flex-row justify-center mt-8\">\n              <Button className=\"mr-4\">Download card</Button>\n              <Button>Instagram story...</Button>\n            </div>\n          </div>\n        </div>\n    )\n}\n","/Users/richardlu/Documents/GitHub projects/chess-card/src/components/RadioButtonGroup/RadioButtonGroup.tsx",[],"/Users/richardlu/Documents/GitHub projects/chess-card/src/components/RadioButtonGroup/RadioButton.tsx",["72"],"import React from 'react'\nimport classNames from 'classnames'\n\nexport type HTMLInputValue = string | number | readonly string[] | undefined\nexport interface RadioValue<T> {\n    key: HTMLInputValue,\n    value: T\n}\ntype RadioButtonProps<T> = {\n    name: string,\n    value: HTMLInputValue,\n    onChange: (value: HTMLInputValue) => void,\n\n    isActive: boolean,\n    setActive: (id: string) => void,\n    activeClassName?: string | undefined,\n\n    id: string,\n    className?: string\n}\n\nconst RadioButton = <T,>(\n    { name, value, onChange, isActive, setActive, activeClassName, id, className }: RadioButtonProps<T>\n) => {\n    return (\n        <label \n            htmlFor={id}\n            onClick={() => {\n                setActive(id)\n            }}\n            className={classNames(\n                className,\n                isActive && activeClassName\n            )}\n        >\n            <input\n                type=\"radio\"\n                checked={isActive}\n                name={name}\n                value={value}\n                onChange={e => onChange(e.currentTarget.value)}\n                id={id}\n                className=\"\"\n                required\n            />\n            { value }\n        </label>\n    )\n}\n\nexport default RadioButton\n",["73","74"],"/Users/richardlu/Documents/GitHub projects/chess-card/src/components/TextInput/Button.tsx",[],"/Users/richardlu/Documents/GitHub projects/chess-card/src/components/types.ts",[],{"ruleId":"75","replacedBy":"76"},{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","severity":1,"message":"80","line":24,"column":9,"nodeType":"81","messageId":"82","endLine":24,"endColumn":22},{"ruleId":"75","replacedBy":"83"},{"ruleId":"77","replacedBy":"84"},{"ruleId":"85","severity":1,"message":"86","line":6,"column":14,"nodeType":"87","endLine":6,"endColumn":76},{"ruleId":"79","severity":1,"message":"88","line":6,"column":8,"nodeType":"81","messageId":"82","endLine":6,"endColumn":18},{"ruleId":"79","severity":1,"message":"89","line":81,"column":7,"nodeType":"81","messageId":"82","endLine":81,"endColumn":16},{"ruleId":"79","severity":1,"message":"90","line":109,"column":11,"nodeType":"81","messageId":"82","endLine":109,"endColumn":23},{"ruleId":"79","severity":1,"message":"91","line":5,"column":8,"nodeType":"81","messageId":"82","endLine":5,"endColumn":17},{"ruleId":"79","severity":1,"message":"92","line":9,"column":23,"nodeType":"81","messageId":"82","endLine":9,"endColumn":24},{"ruleId":"75","replacedBy":"93"},{"ruleId":"77","replacedBy":"94"},"no-native-reassign",["95"],"no-negated-in-lhs",["96"],"@typescript-eslint/no-unused-vars","'overpassBlack' is assigned a value but never used.","Identifier","unusedVar",["95"],["96"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'bishopIcon' is defined but never used.","'mainColor' is assigned a value but never used.","'handleExport' is assigned a value but never used.","'ColorIcon' is defined but never used.","'T' is defined but never used.",["95"],["96"],"no-global-assign","no-unsafe-negation"]